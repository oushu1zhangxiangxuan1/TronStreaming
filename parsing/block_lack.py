# -*- encoding: utf-8 -*-
import env
from parsing import Tron_pb2

import plyvel
import hashlib
import traceback
import logging
import datetime
from parsing import contract
from parsing.base import (
    BaseParser,
    ColumnIndex,
    OriginColumn,
    # addressFromBytes,
    autoDecode,
    # CheckPathAccess,
    TransConfigParser,
    TransWriter,
    bytes2HexStr,
    num2Bytes,
)

env.touch()
# logging.basicConfig(level=logging.INFO)
# logging.basicConfig(
#     format="%(asctime)s.%(msecs)03d [%(levelname)s] [%(filename)s:%(lineno)d] %(message)s",
#     datefmt="## %Y-%m-%d %H:%M:%S",
# )

logging.getLogger().setLevel(logging.INFO)
logger = logging.getLogger()
ch = logging.StreamHandler()
formatter = logging.Formatter(
    "[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d] %(message)s"
)
# add formatter to console handler
ch.setFormatter(formatter)
logger.addHandler(ch)


class BlockParser(BaseParser):
    def Parse(self, writer, data, appendData):
        # super().Parse(writer, data, appendData)
        transAppend = {
            "block_hash": appendData["hash"],
            "block_num": appendData["block_num"],
        }
        for trans in data.transactions:
            transId = hashlib.sha256(trans.raw_data.SerializeToString()).hexdigest()
            transAppend["id"] = transId
            ret = transParser.Parse(writer, trans, transAppend)
            if not ret:
                # 记录trans,block
                writer.write("err_trans_v1", [appendData["block_num"], transId])
                return False
        return True


def _retWrapper(oc):
    return OriginColumn(name="ret", oc=oc, listHead=True)


def _rawDataWrapper(oc):
    return OriginColumn(name="raw_data", oc=oc)


class TransParser(BaseParser):

    colIndex = [
        ColumnIndex(name="id", fromAppend=True),
        ColumnIndex(name="block_hash", fromAppend=True),
        ColumnIndex(name="block_num", fromAppend=True),
        # ret
        ColumnIndex(
            name="fee", oc=_retWrapper(OriginColumn(name="fee", colType="int64"))
        ),
        ColumnIndex(
            name="ret", oc=_retWrapper(OriginColumn(name="ret", colType="int"))
        ),
        ColumnIndex(
            name="contract_type",
            oc=_rawDataWrapper(
                OriginColumn(
                    name="contract",
                    oc=OriginColumn(name="type", colType="int"),
                    listHead=True,
                )
            ),
        ),
        ColumnIndex(
            name="contract_ret",
            oc=_retWrapper(OriginColumn(name="contractRet", colType="int")),
        ),
        ColumnIndex(
            name="asset_issue_id",
            oc=_retWrapper(OriginColumn(name="assetIssueID", colType="string")),
        ),
        ColumnIndex(
            name="withdraw_amount",
            oc=_retWrapper(OriginColumn(name="withdraw_amount", colType="int64")),
        ),
        ColumnIndex(
            name="unfreeze_amount",
            oc=_retWrapper(OriginColumn(name="unfreeze_amount", colType="int64")),
        ),
        ColumnIndex(
            name="exchange_received_amount",
            oc=_retWrapper(
                OriginColumn(name="exchange_received_amount", colType="int64")
            ),
        ),
        ColumnIndex(
            name="exchange_inject_another_amount",
            oc=_retWrapper(
                OriginColumn(name="exchange_inject_another_amount", colType="int64")
            ),
        ),
        ColumnIndex(
            name="exchange_withdraw_another_amount",
            oc=_retWrapper(
                OriginColumn(name="exchange_withdraw_another_amount", colType="int64")
            ),
        ),
        ColumnIndex(
            name="exchange_id",
            oc=_retWrapper(OriginColumn(name="exchange_id", colType="int64")),
        ),
        ColumnIndex(
            name="shielded_transaction_fee",
            oc=_retWrapper(
                OriginColumn(name="shielded_transaction_fee", colType="int64")
            ),
        ),
        ColumnIndex(
            name="order_id",
            oc=_retWrapper(OriginColumn(name="order_id", castFunc=autoDecode)),
        ),
        ColumnIndex(
            name="ref_block_bytes",
            oc=_rawDataWrapper(OriginColumn(name="ref_block_bytes")),
        ),
        ColumnIndex(
            name="ref_block_num",
            oc=_rawDataWrapper(OriginColumn(name="ref_block_num", colType="int64")),
        ),
        ColumnIndex(
            name="ref_block_hash",
            oc=_rawDataWrapper(OriginColumn(name="ref_block_hash", colType="bytes")),
        ),
        ColumnIndex(
            name="expiration",
            oc=_rawDataWrapper(OriginColumn(name="expiration", colType="int64")),
        ),
        ColumnIndex(
            name="trans_time",
            oc=_rawDataWrapper(OriginColumn(name="timestamp", colType="int64")),
        ),
        ColumnIndex(
            name="fee_limit",
            oc=_rawDataWrapper(OriginColumn(name="fee_limit", colType="int64")),
        ),
        ColumnIndex(
            name="scripts",
            # oc=_rawDataWrapper(OriginColumn(name="scripts", castFunc=autoDecode)),
            oc=_rawDataWrapper(OriginColumn(name="scripts")),
        ),
        ColumnIndex(
            name="data",
            # oc=_rawDataWrapper(OriginColumn(name="data", castFunc=autoDecode)),
            oc=_rawDataWrapper(OriginColumn(name="data")),
        ),
        ColumnIndex(
            name="signature",
            oc=OriginColumn(
                name="signature",
                listHead=True,
                oc=OriginColumn(name="signature", colType="bytes"),
            ),
        ),
    ]

    table = "trans"

    def Parse(self, writer, data, appendData):
        return super().Parse(writer, data, appendData)


transParser = TransParser()

tables = [
    "err_trans_v1",
    "trans",
]


lack_blocks = [
    27587283,
    27581442,
    27581441,
    28107575,
    28069320,
    28109059,
    28180680,
    28107505,
    28078778,
    28096305,
    28096313,
    21541247,
    21541318,
    21541254,
    21541291,
    29319161,
    29319152,
    27587277,
    28118098,
    28073583,
    28073581,
    28096316,
    28109107,
    28180656,
    28180658,
    28073592,
    28109066,
    28107479,
    28107497,
    28107516,
    28109147,
    28107490,
    21541251,
    27581459,
    27581453,
    28107489,
    28096364,
    28107605,
    28096294,
    28107604,
    28107598,
    28128363,
    28109149,
    28069317,
    28128365,
    28078789,
    28096344,
    28180682,
    28107603,
    21541242,
    21541230,
    21541268,
    21541234,
    29353184,
    27779172,
    28073569,
    28109090,
    28109063,
    28107613,
    28109145,
    28107589,
    28118114,
    28107622,
    28107588,
    28096298,
    28107525,
    28107582,
    21541317,
    21541293,
    21541305,
    21541275,
    21541288,
    21541259,
    27581451,
    27581454,
    27581457,
    27581750,
    28069314,
    28096314,
    28069484,
    28069491,
    28118087,
    28096297,
    28096352,
    21541232,
    21541307,
    29353176,
    27581461,
    27581452,
    27779177,
    28118097,
    28096362,
    28107503,
    28118092,
    28107501,
    28107592,
    28180664,
    28128361,
    28118106,
    28107587,
    21541220,
    21541320,
    21541272,
    27581448,
    27587271,
    27581456,
    28180654,
    28180655,
    28069318,
    28096278,
    28128380,
    28180652,
    28118096,
    28073577,
    28180653,
    28107618,
    28096353,
    21541300,
    29319160,
    27581446,
    27581464,
    27779174,
    28107481,
    28128367,
    28107492,
    28096299,
    28096291,
    28069328,
    28096363,
    28069490,
    28069489,
    28109087,
    21541281,
    21541258,
    21541314,
    21541225,
    21541266,
    29319133,
    29319163,
    27779179,
    28107508,
    28128396,
    28069496,
    28109075,
    28096288,
    28128357,
    28128364,
    28107593,
    28096303,
    28096355,
    28107623,
    28128382,
    29353193,
    29319127,
    27587268,
    27581471,
    27581749,
    27587287,
    28107519,
    28118100,
    28096277,
    28107607,
    28107578,
    28096347,
    28107486,
    28073593,
    28107521,
    28107608,
    28109150,
    28118089,
    28078784,
    28128373,
    21541253,
    21541277,
    21541257,
    29353189,
    27581751,
    27587284,
    28096350,
    28107484,
    28109068,
    28069482,
    28107478,
    28073590,
    28096340,
    28078788,
    28118120,
    28096285,
    28109096,
    28128378,
    28180678,
    28107511,
    28073587,
    21541239,
    21541316,
    21541308,
    29319131,
    21541271,
    29353186,
    27581466,
    28073574,
    28096287,
    28096289,
    28096307,
    28069479,
    28107527,
    28118107,
    28109072,
    21541264,
    21541287,
    29319154,
    29353183,
    29319140,
    27581757,
    28069474,
    28069476,
    28128360,
    28128393,
    28073580,
    28109092,
    28096356,
    28109089,
    28107504,
    28180669,
    28107567,
    21541319,
    27581747,
    27581756,
    27779163,
    27779169,
    28096318,
    28107485,
    28107526,
    28109112,
    28069331,
    28109114,
    28128389,
    28128375,
    28078791,
    21541279,
    21541311,
    27779167,
    28096346,
    28069500,
    28109148,
    28096368,
    28128388,
    28109073,
    28107506,
    28107502,
    28180662,
    28107573,
    28073599,
    28096306,
    28107583,
    21541278,
    29319136,
    29319150,
    21541267,
    28096348,
    28107591,
    28073595,
    28109144,
    28107512,
    28107529,
    28096281,
    28107480,
    28180671,
    21541222,
    29353190,
    28107611,
    27779175,
    28096357,
    28096302,
    28069327,
    28096338,
    28096293,
    28107599,
    28069322,
    28180663,
    28107579,
    28128384,
    28107602,
    28128376,
    28118104,
    21541297,
    21541274,
    29353187,
    21541290,
    29353178,
    27581439,
    28109076,
    28107601,
    28180673,
    28107520,
    28107606,
    21541270,
    29319145,
    29353198,
    29353177,
    27587269,
    27581754,
    27581443,
    28078781,
    28180674,
    28096276,
    28180677,
    28180685,
    28128359,
    28069313,
    21541312,
    21541241,
    27581469,
    27587273,
    27581473,
    28069330,
    28078782,
    28109067,
    28109097,
    28069481,
    28128390,
    28109060,
    28128387,
    28096343,
    29319126,
    27587282,
    27587267,
    28128379,
    28073579,
    28069329,
    28109100,
    28107482,
    28128386,
    28128397,
    21541292,
    21541255,
    29319135,
    29319143,
    21541283,
    21541236,
    27587281,
    28107577,
    28073585,
    28073601,
    28096345,
    28073573,
    28118099,
    28107522,
    28109108,
    28180672,
    28107523,
    28128356,
    28109106,
    28069316,
    28096312,
    28109080,
    21541224,
    21541250,
    21541246,
    21541280,
    29353185,
    28118119,
    28069478,
    28180687,
    28107612,
    28109071,
    28118118,
    28109083,
    28096290,
    28128383,
    21541294,
    29319128,
    27581472,
    27587280,
    27779183,
    27779176,
    27779181,
    28069494,
    28096310,
    28109091,
    28109143,
    28096358,
    28107477,
    28096319,
    28107513,
    28128377,
    28107594,
    28109104,
    21541245,
    29353181,
    29353195,
    27581752,
    28128392,
    28069498,
    28096333,
    28107534,
    28118085,
    28109146,
    28069503,
    28118110,
    28180668,
    28069492,
    28096336,
    28096280,
    28109088,
    28107620,
    28107584,
    28107568,
    21541238,
    27587285,
    27581447,
    27779173,
    28073575,
    28073596,
    28180661,
    28109061,
    28107576,
    28107614,
    28128395,
    28096339,
    28128368,
    28073591,
    21541296,
    21541276,
    21541231,
    29319149,
    29319125,
    29319157,
    29319132,
    28118090,
    28107580,
    28109102,
    28107600,
    28096284,
    28107610,
    21541285,
    21541233,
    29319162,
    21541256,
    21541235,
    27587272,
    27581468,
    27587275,
    28107596,
    28107586,
    28109074,
    28128366,
    28069504,
    28096365,
    28180659,
    21541313,
    21541228,
    29319146,
    29319141,
    29353182,
    29319158,
    27587265,
    28069324,
    28118095,
    28073598,
    28096282,
    28096279,
    28107616,
    28128369,
    21541221,
    21541299,
    21541286,
    27587286,
    28109065,
    28096342,
    28128381,
    28096311,
    28096359,
    28109152,
    28107530,
    28109140,
    28109103,
    28109093,
    28096301,
    28078786,
    28096370,
    28107536,
    29319139,
    27581753,
    27587278,
    27587266,
    27779178,
    28118115,
    28073572,
    21541244,
    29319153,
    27581748,
    27779180,
    27779164,
    27779185,
    28073576,
    28118086,
    28096367,
    28107615,
    28180675,
    28118122,
    28078783,
    28128385,
    21541243,
    21541295,
    21541248,
    27581745,
    27581450,
    27779168,
    27779170,
    28109105,
    28096295,
    28069495,
    28118094,
    28109069,
    28107609,
    28107510,
    28078779,
    28118102,
    28096296,
    21541298,
    27581458,
    27581463,
    28107514,
    28107570,
    28069480,
    28107509,
    28118091,
    28096315,
    28107532,
    28128391,
    28107488,
    28109085,
    28096304,
    28109064,
    28118111,
    21541301,
    29353194,
    29353180,
    21541273,
    28096335,
    28078790,
    28069502,
    28069477,
    28096286,
    28118112,
    28128374,
    28180681,
    28069319,
    29319129,
    27587274,
    27581455,
    27779184,
    28107585,
    28118101,
    28107574,
    28107491,
    28109062,
    21541306,
    21541303,
    21541262,
    21541223,
    29319156,
    27581438,
    27779165,
    28069487,
    28069323,
    28118088,
    28107499,
    28107494,
    28180684,
    28109101,
    28109095,
    28109142,
    28180670,
    28073588,
    28096360,
    21541310,
    21541284,
    27587270,
    29319155,
    21541249,
    27587279,
    27779166,
    28107590,
    28128394,
    28107487,
    28107595,
    28109077,
    28109141,
    28109094,
    21541309,
    21541265,
    29319142,
    29353179,
    29319134,
    27581755,
    28118109,
    28180676,
    28118113,
    28109081,
    28118103,
    28107500,
    28096317,
    28109086,
    28096320,
    28107483,
    28128370,
    28107569,
    29319137,
    29353188,
    27779161,
    27779186,
    28107515,
    28109111,
    28069486,
    29319138,
    21541260,
    21541315,
    29353175,
    27581465,
    27581475,
    28107517,
    28107498,
    28096351,
    28109113,
    28128371,
    28109109,
    28107581,
    28180657,
    28107531,
    28096283,
    28109151,
    28107621,
    28118083,
    28107597,
    28118084,
    21541261,
    21541263,
    21541229,
    29319159,
    29319148,
    29319151,
    27581460,
    27581437,
    27587276,
    27581462,
    27581746,
    27581440,
    28109058,
    28107528,
    28069315,
    28096361,
    28096334,
    28180683,
    28109082,
    28107493,
    28096337,
    28107571,
    28107617,
    21541304,
    21541237,
    21541302,
    29353191,
    21541269,
    21541226,
    29319147,
    27581444,
    27581470,
    27779182,
    28107476,
    28109070,
    28069497,
    28107572,
    28073594,
    28073586,
    28069493,
    28073582,
    28180660,
    28069499,
    28109084,
    28096292,
    28096354,
    28107507,
    28107619,
    28128358,
    21541252,
    21541289,
    27581467,
    27581445,
    27779171,
    28073578,
    28073570,
    28096308,
    28107496,
    28096341,
    28128372,
    28107518,
    28096300,
    28128362,
    28180679,
    29319144,
    27581744,
    27779187,
    28107535,
    28069326,
    28073571,
    28109079,
    28069483,
    28109099,
    28096369,
    28078787,
    28107495,
    28069501,
    21541321,
    21541240,
    27581474,
    27581449,
    27779162,
    28078780,
    28078792,
    28118121,
    28078785,
    28118105,
    28180667,
    28109098,
    28073589,
    28069488,
    28180665,
    28096309,
    28118116,
    28109110,
    28109078,
    28073600,
    28073584,
    28180686,
    21541227,
    29353197,
    21541282,
    29353192,
    27779188,
    28118093,
    28069485,
    28069475,
    28109153,
    28069321,
    28118117,
    28107524,
    28096349,
    28069325,
    28073597,
    28107533,
    28096366,
    28180666,
    28118108,
    21541219,
    29319130,
    29353196,
]


def main():
    """ """
    config, err = TransConfigParser.Parse()
    if err is not None:
        logger.error("Failed to get block config: {}".format(err))
        exit(-1)
    transWriter = TransWriter(config, tables)

    start = datetime.datetime.now()
    count = 1
    try:
        blockDb = plyvel.DB(config.get("blockDb"))
        blockIndexDb = plyvel.DB(config.get("blockIndexDb"))

        contract.initContractParser()
        for blockNum in lack_blocks:
            try:
                if count % 1000 == 0:
                    end = datetime.datetime.now()
                    logger.info(
                        "已处理 {} 个区块，共耗时 {} 微秒, 平均单个耗时 {} 微秒".format(
                            count,
                            (end - start).microseconds,
                            (end - start).microseconds / count,
                        )
                    )
                    transWriter.flush()
                blockHashBytes = blockIndexDb.get(num2Bytes(int(blockNum)))
                blockBytes = blockDb.get(blockHashBytes)
                blockHash = bytes2HexStr(blockHashBytes)
                block = Tron_pb2.Block()
                block.ParseFromString(blockBytes)
                appendData = {
                    "block_num": blockNum,
                    "hash": blockHash,
                }
                bp = BlockParser()
                ret = bp.Parse(transWriter, block, appendData)
                if not ret:
                    logger.error("Failed to parse block num: {}".format(blockNum))
                    break
                count += 1
            except Exception:
                logger.error("Failed to parse block num: {}".format(blockNum))
                traceback.print_exc()
                break
    except Exception:
        traceback.print_exc()
    finally:
        transWriter.flush()
        transWriter.close()
        end = datetime.datetime.now()
        logger.info(
            "共处理 {} 个区块，共耗时 {} 微秒, 平均单个耗时 {} 微秒".format(
                count - 1,
                (end - start).microseconds,
                (end - start).microseconds / (count - 1),
            )
        )
        logger.info(
            "处理 29617377 个区块，预计用时 {} 小时".format(
                ((29617377 / (count - 1)) * (end - start).microseconds) / 1000000 / 3600
            )
        )
        logger.info("开始时间: {}".format(start.strftime("%Y-%m-%d %H:%M:%S")))
        logger.info("结束时间: {}".format(end.strftime("%Y-%m-%d %H:%M:%S")))


if "__main__" == __name__:
    main()
